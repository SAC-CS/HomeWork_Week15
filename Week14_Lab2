//-----------Lab2Week14: Enhance lab 1, using Executor framework ---------------------------
//-----------to throw the dice 25 times in separate threads---------------------------------

import java.util.Scanner;

class Dice implements Runnable 
{
    private final int counter;
 
    public Dice(int counterInt) 
    {
    	this.counter = counterInt;   	    	
    }
       
     @Override
     public void run() 
    {
         try 
        { 	        	 
        	 System.out.println("Throwing Dice : " + counter);    
        	 //Thread.currentThread().setName(String.valueOf(counter));
        	 System.out.println(Thread.currentThread().getName()+"\n");
        	 
             // Let the thread sleep for a while.
             Thread.sleep(100);
         } 
        catch (InterruptedException e) 
        {
             System.out.println("Dice interrupted.");
         }
         System.out.println("Exiting Dice thread.");
     }
}
//==============================================================================
import java.util.concurrent.Executors;
import java.util.concurrent.ExecutorService;

public class MainDiceTest  {
    
    public static void main(String[] args) {          	   	

    	// create ExecutorService to manage threads
    	 ExecutorService threadExecutor = Executors.newCachedThreadPool();
    	 System.out.println( "Starting Executor" );
    	 
         for(int i = 1; i <=25; i++) 
            {
            	 Dice task = new Dice(i);
            	//start threads and place in runnable state
            	 threadExecutor.execute(task); // start task1, task2, task3, task4.....               	      
             }
             
          //shut down worker threads when their tasks complete
          threadExecutor.shutdown();
          System.out.println( "Tasks started, main ends.\n" );
      
          System.out.println("Main thread exiting.");
 
    }
 }
